plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
}

repositories {
    mavenCentral()
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

group 'me.senseiwells'
version '1.2.0'

sourceSets {
    main {
        java.srcDirs 'src/main/java'
        resources.setSrcDirs(['src/main/resources'])
    }
    test {
        java.srcDirs 'src/test/java'
        resources.setSrcDirs(['src/test/resources'])
    }
    jmh {
        compileClasspath += sourceSets.test.runtimeClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
}

configurations {
    // implementations that should be included in the jar file
    packImplementation {
        transitive false
    }

    implementation.extendsFrom(packImplementation)
}

dependencies {
    implementation 'junit:junit:4.13.2'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.openjdk.jmh:jmh-core:1.35'
    testAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.35'

    compileOnly 'com.google.code.gson:gson:2.9.0'
    testImplementation 'com.google.code.gson:gson:2.9.0'
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
}

task jmh(type: JavaExec, description: 'Executing JMH benchmarks') {
    classpath = sourceSets.jmh.runtimeClasspath
    main = 'org.openjdk.jmh.Main'

    def include = project.properties.get('include', '')
    def format = project.properties.get('format', 'json')
    def resultFile = file("build/reports/jmh/result.${format}")
    resultFile.parentFile.mkdirs()

    args include
    args '-rf', format
    args '-rff', resultFile
}

test {
    failFast false
    filter {
        includeTestsMatching 'me.senseiwells.test.*'
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jar {
    from "LICENSE"
    from {
        configurations.packImplementation.collect { it.isDirectory() ? it : zipTree(it) }
    }

    // manifest.attributes("Main-Class": "me.senseiwells.arucas.Main")
    // manifest.attributes("Class-Path": configurations.runtimeClasspath.files.collect { it.getName() }.join(' '))
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'com.github.senseiwells'
            artifactId = 'Arucas'
            version = '1.2.0'

            from components.java
        }
    }
}
