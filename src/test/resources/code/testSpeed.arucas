// run(getDirectory() + "/src/test/resources/code/testSpeed.arucas");

class Benchmark {
    static var thread = Thread.getCurrentThread();

    static fun average(list) {
        totalCount = len(list);
        totalValue = 0;
        foreach (value : list) totalValue = totalValue + value;
        return totalValue / totalCount;
    }

    static fun valueFunctionCallAvg(value) {
        times = [];
        for (i = 0; i < 5; i++) {
            start = Benchmark.thread.getAge();
            for (i = 0; i < 10000000; i++) value.memberValue;
            end = Benchmark.thread.getAge();
            times.append(end - start);
        }
        return Benchmark.average(times);
    }
}

class UserClass {
    UserClass() {

    }

    fun toString() {
        return '';
    }
}

delegate = Benchmark.valueFunctionCallAvg;

s = " ms per 10 million iterations";

print("----------:----------------------------------------------");
print("Test      > %s%s".formatted([delegate(new Test()), s]));
